"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fixConfigDev = exports.onDevRequest = exports.rawBody = void 0;
const entrypoint = process.env.VERCEL_DEV_ENTRYPOINT;
delete process.env.VERCEL_DEV_ENTRYPOINT;
const tsconfig = process.env.VERCEL_DEV_TSCONFIG;
delete process.env.VERCEL_DEV_TSCONFIG;
if (!entrypoint) {
    throw new Error('`VERCEL_DEV_ENTRYPOINT` must be defined');
}
const path_1 = require("path");
const ts_node_1 = require("ts-node");
const typescript_1 = require("./typescript");
let useRequire = false;
if (!process.env.VERCEL_DEV_IS_ESM) {
    const resolveTypescript = (p) => {
        try {
            return require.resolve('typescript', {
                paths: [p],
            });
        }
        catch (_) {
            return '';
        }
    };
    const requireTypescript = (p) => {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        return require(p);
    };
    let ts = null;
    // Use the project's version of Typescript if available and supports `target`
    let compiler = resolveTypescript(process.cwd());
    if (compiler) {
        ts = requireTypescript(compiler);
    }
    // Otherwise fall back to using the copy that `@vercel/node` uses
    if (!ts) {
        compiler = resolveTypescript(path_1.join(__dirname, '..'));
        ts = requireTypescript(compiler);
    }
    let config = {};
    if (tsconfig) {
        try {
            config = ts.readConfigFile(tsconfig, ts.sys.readFile).config;
        }
        catch (err) {
            if (err.code !== 'ENOENT') {
                console.error(`Error while parsing "${tsconfig}"`);
                throw err;
            }
        }
    }
    fixConfigDev(config);
    ts_node_1.register({
        compiler,
        compilerOptions: config.compilerOptions,
        transpileOnly: true,
    });
    useRequire = true;
}
const http_1 = require("http");
const launcher_js_1 = require("@vercel/node-bridge/launcher.js");
const build_utils_1 = require("@vercel/build-utils");
const exit_hook_1 = __importDefault(require("exit-hook"));
const edge_runtime_1 = require("edge-runtime");
const static_config_1 = require("@vercel/static-config");
const ts_morph_1 = require("ts-morph");
const ncc_1 = __importDefault(require("@vercel/ncc"));
const node_fetch_1 = __importDefault(require("node-fetch"));
function listen(server, port, host) {
    return new Promise(resolve => {
        server.listen(port, host, () => {
            resolve();
        });
    });
}
async function createServerlessEventHandler(entrypoint, options) {
    const launcher = launcher_js_1.getVercelLauncher({
        entrypointPath: entrypoint,
        helpersPath: './helpers.js',
        shouldAddHelpers: options.shouldAddHelpers,
        useRequire,
        // not used
        bridgePath: '',
        sourcemapSupportPath: '',
    });
    const bridge = launcher();
    return async function (request) {
        const body = await rawBody(request);
        const event = {
            Action: 'Invoke',
            body: JSON.stringify({
                method: request.method,
                path: request.url,
                headers: request.headers,
                encoding: 'base64',
                body: body.toString('base64'),
            }),
        };
        return bridge.launcher(event, {
            callbackWaitsForEmptyEventLoop: false,
        });
    };
}
async function serializeRequest(message) {
    const bodyBuffer = await build_utils_1.streamToBuffer(message);
    const body = bodyBuffer.toString('base64');
    return JSON.stringify({
        url: message.url,
        method: message.method,
        headers: message.headers,
        body,
    });
}
async function createEdgeEventHandler(entrypoint) {
    const buildResult = await ncc_1.default(entrypoint, { target: 'es2022' });
    const userCode = buildResult.code;
    const initialCode = `
    ${userCode};

    addEventListener('fetch', async (event) => {
      let serializedRequest = await event.request.text();
      let requestDetails = JSON.parse(serializedRequest);

      let body;

      if (requestDetails.method !== 'GET' && requestDetails.method !== 'HEAD') {
        body = Uint8Array.from(atob(requestDetails.body), c => c.charCodeAt(0));
      }

      let requestUrl = requestDetails.headers['x-forwarded-proto'] + '://' + requestDetails.headers['x-forwarded-host'] + requestDetails.url;

      let request = new Request(requestUrl, {
        headers: requestDetails.headers,
        method: requestDetails.method,
        body: body
      });

      event.request = request;

      let edgeHandler = module.exports.default;
      let response = edgeHandler(event.request, event);
      return event.respondWith(response);
    })`;
    const edgeRuntime = new edge_runtime_1.EdgeRuntime({
        initialCode,
        extend: (context) => {
            Object.assign(context, {
                __dirname: '',
                module: {
                    exports: {},
                },
            });
            return context;
        },
    });
    const server = await edge_runtime_1.runServer({ runtime: edgeRuntime });
    exit_hook_1.default(server.close);
    return async function (request) {
        const response = await node_fetch_1.default(server.url, {
            method: 'post',
            body: await serializeRequest(request),
        });
        return {
            statusCode: response.status,
            headers: response.headers.raw(),
            body: await response.text(),
            encoding: 'utf8',
        };
    };
}
const validRuntimes = ['experimental-edge'];
function parseRuntime(entrypoint) {
    const project = new ts_morph_1.Project();
    const staticConfig = static_config_1.getConfig(project, entrypoint);
    const runtime = staticConfig?.runtime;
    if (runtime && !validRuntimes.includes(runtime)) {
        throw new Error(`Invalid function runtime for "${entrypoint}": ${runtime}`);
    }
    return runtime;
}
async function createEventHandler(entrypoint, options) {
    const runtime = parseRuntime(entrypoint);
    if (runtime === 'experimental-edge') {
        return createEdgeEventHandler(entrypoint);
    }
    return createServerlessEventHandler(entrypoint, options);
}
let handleEvent;
async function main() {
    const config = JSON.parse(process.env.VERCEL_DEV_CONFIG || '{}');
    delete process.env.VERCEL_DEV_CONFIG;
    const buildEnv = JSON.parse(process.env.VERCEL_DEV_BUILD_ENV || '{}');
    delete process.env.VERCEL_DEV_BUILD_ENV;
    const shouldAddHelpers = !(config.helpers === false || buildEnv.NODEJS_HELPERS === '0');
    const proxyServer = http_1.createServer(onDevRequest);
    await listen(proxyServer, 0, '127.0.0.1');
    const entryPointPath = path_1.join(process.cwd(), entrypoint);
    handleEvent = await createEventHandler(entryPointPath, { shouldAddHelpers });
    const address = proxyServer.address();
    if (typeof process.send === 'function') {
        process.send(address);
    }
    else {
        console.log('Dev server listening:', address);
    }
}
function rawBody(readable) {
    return new Promise((resolve, reject) => {
        let bytes = 0;
        const chunks = [];
        readable.on('error', reject);
        readable.on('data', chunk => {
            chunks.push(chunk);
            bytes += chunk.length;
        });
        readable.on('end', () => {
            resolve(Buffer.concat(chunks, bytes));
        });
    });
}
exports.rawBody = rawBody;
async function onDevRequest(req, res) {
    if (!handleEvent) {
        res.statusCode = 500;
        res.end('Bridge is not ready, please try again');
        return;
    }
    try {
        const result = await handleEvent(req);
        res.statusCode = result.statusCode;
        for (const [key, value] of Object.entries(result.headers)) {
            if (typeof value !== 'undefined') {
                res.setHeader(key, value);
            }
        }
        res.end(Buffer.from(result.body, result.encoding));
    }
    catch (error) {
        res.statusCode = 500;
        res.end(error.stack);
    }
}
exports.onDevRequest = onDevRequest;
function fixConfigDev(config) {
    const nodeVersionMajor = Number(process.versions.node.split('.')[0]);
    typescript_1.fixConfig(config, nodeVersionMajor);
    // In prod, `.ts` inputs use TypeScript and
    // `.js` inputs use Babel to convert ESM to CJS.
    // In dev, both `.ts` and `.js` inputs use ts-node
    // without Babel so we must enable `allowJs`.
    config.compilerOptions.allowJs = true;
    // In prod, we emit outputs to the filesystem.
    // In dev, we don't emit because we use ts-node.
    config.compilerOptions.noEmit = true;
}
exports.fixConfigDev = fixConfigDev;
main().catch(err => {
    console.error(err);
    process.exit(1);
});
